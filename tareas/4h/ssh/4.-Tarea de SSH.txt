separator: ---------------------------

syntax:
	### : further investigation 					grep -Eno " +### *" taskname.txt
	# .* # : concept investigation					grep -Eno '# ([[:alnum:]]+ )+#' taskname.txt
	* .* * : important						grep -Eno '\* ([[:alpha:]]+ )+\*' taskname.txt
	( [[:digit:]] ) : ennumeration (first indent) 
	[[:alpha:]] ) : ennumeration (second indent) 
	--------------------------- : sub question separator
	[ | | | .. ] : references ( at the end of each answer ) 
	-- .* -- : comments
	" excerpt " : extracts from command execution
	EXAMPLE: code


################################ Sartenejas, 29 de Noviembre de 2012 Universidad Simon Bolivar                      
## Laboratorio Docente de Computacion              #
# Secure Shell (SSH)                   			  #
# Autor: Jose Luis Lo Huang             		  #
###################################################

Syllabus: 

	SSH
	\- what is
	\- ciphers
	\- handshaking
		\- version negotiation
		\- server authentication
		\- encryption negotiation
		\- user authentication
			\- password
			\- keys
	\- ssh-keys [ host, identities ] 
		\- public, private
		\- passphrase
		\- creation process
		\- local and remote config files
	\- ssh-agent [ only identities ]
		\- single sign on	
		\- ssh-add
		\- agent forward 
			\- Reason of existence <- IMP 
			\- 


00. Que Es SSH?, Por Que Fue Creado?

	On UNIX Systems early days, it was common to use programs such as rlogin or telnet.
	 The problem was that this programs transmitted comunications on cleartext 
	(including password and login names). 
		
				---------------------------

	This led to the creation of the SSH protocol ( RFC 4250 .. 4819 ) that besides
	providing remote login and executing commands on a remote machine, it solves
	two problems: *authenticates the identity* of the remote host and *encrypts
	all comunications* between the local and remote host. Additionally it provides 
	# X11 connections #, arbitrary TCP ports and # UNIX domain sockets #. 

	
	[ man ssh | TLC William E. Shotts Jr ] 

	X11: Windowing system for bitmap displays. It is also a protocol used in its
	eleventh version (hence the 11), which originated at the MIT and it is 
	currently leaded by the X.org foundation. 

	It is an architecture-independent system for remote graphic-user interface
	and # input device capabilities # ( <- terminals? ). X provides a basic
	framework, or primitives for creating GUIs : drawing and moving windows
	on the display or interacting with a mouse, keyboard or touchscreen.

	This protocol was designed in particular to work over network connection. 
	The X server usually runs on a user computers while the clients are on some
	remote computer, this is, X provides display and I/O services to applications
	(remote or local) so it is a server; applications use this services, thus
	they are clients. 

	To use an X client application: 
		@ open a terminal window. 
		@ use ssh with the X forwarding argument	
		@ request local display/input services (e.g: export DISPLAY=[hostname]:0) <-guat?

	Its configuration files are located at : /etc/X11/ 
	
	-- This is to complicated -- 
	

	[ https://en.wikipedia.org/wiki/X_Window_System ]

01. Que Es un Algoritmo de Cifrado, Cuales Son Los Que Utiliza SSH?

	Algorithm that allows 'encripting' and 'decrypting', which are processes that
	allow to transform information/messages to code and vice versa.  Usually, ciphers
	substitude input to output of the same length whilst coding/decoding involves
	substution of different size strings of characters.

	The name of the unencrypted text is 'plaintext' and the decrypted text is known
	as 'ciphertext'.

	Usually a cipher's output depens on the presence of a 'key' or *'criptovariable'*.
	This cause the ciphertext for a message varies depending on the key being used
	, this as a consequence of the key on some steps of the cipher algorithm. The whole
	point of using keys is that it makes obtaining the plaintext from the ciphertext
	extremely difficult. 
	
	Modern ciphers are classified by: 
		@ wether they work on blocks of symbols of fixed size (# blockciphers #) 	
		or on a contiguous stream of characters (# streamciphers #)
		@ wether the same key is used both in encription and decription
		(* simmetric key algorithm *) or not, (* asymmetric key algorithm *).If the
		enciphering is asymmetric, the enciphering key is different but 	
		related to the deciphering key. If the keys are not related at all	
		then the algorithm admits public/private pair of keys without
		compromising *confidentiality*. 

				---------------------------

	By quering ssh_config (5), and checking the *keyword* Ciphers we get : 
	"" 
	 The supported ciphers are:

                   3des-cbc
                   aes128-cbc
                   aes192-cbc
                   aes256-cbc
                   aes128-ctr
                   aes192-ctr
                   aes256-ctr
                   aes128-gcm@openssh.com
                   aes256-gcm@openssh.com
                   chacha20-poly1305@openssh.com

             The default is:

                   chacha20-poly1305@openssh.com,
                   aes128-ctr,aes192-ctr,aes256-ctr,
                   aes128-gcm@openssh.com,aes256-gcm@openssh.com
								""
	
	alternatively, it is possible to list available ciphers using: 
		ssh -Q cipher

	Ciphers are enable by modifying configuration file: 
		/etc/ssh/ssh_config 

	And adding an entry for keyword Cipher such as: 
		Ciphers +3des-cbc

	### check aes, cbc, ctr, gcm ###


	[man ssh_config , https://en.wikipedia.org/wiki/Cipher ]

02. En Windows, Que Son Putty, Poderosa Y PowerSHELL? Que Es MSYSGit?

03. Explique Lo Que Sucede Desde Que Hacemos SSH A Una Maquina Desde el Terminal 
	Hasta Que Finalmente Ya Estamos Autenticados.

	The process of a client connecting to a server using the ssh protocol takes 
	the follwing steps: 

	( 0.5 ) - Version verification: When a TCP connection is made by a client the
	server responds with the version of SSH it supports. If version on extremes 
	are compatible, the process continues.  <- otherwise ###

	( 1.- ) Server authentication: The server provides it's public host key, which the 
	user can use to check authenticy, first within its configuration files 
	( ~/.ssh/known_hosts ) , and if not found, the key can be searched online
	and compared. 

	( 2.- ) Encryption negotiation: Here, bot client and server negotiate a session key
	using a version of the # Diffie-Hellman algorithm #. The session key will remain 
	through the whole session and * it differs from public/private keys used for
	authentication *.

	The procedure goes like this: 	
		a ) both parts agree on a large prime number. 

		b ) both parts agree on an # encription generator # , such as (AES).

		c ) each part produces a secret prime number, * which is used as a
		private key for this interaction * (different from the secret key
		used for authentication). 

		d ) The private key, the encryption generator and public prime number 
		are used to generate a public key for each host (which is shareable).

		e ) each host uses the public key, private key and original prime 	
		number to computed a shared secret key (simmetric). Which despite

		of being calculated using some host-dependet values, is the same
		for both hosts. 

		f ) the shared secret is used to encrypt communications along the 
		session

	All of this trouble to make a shared key for whose creation each host interveined
	equally.  <- why is this so important? ###

	( 3.- ) User authentication: At this steps there are different options depending on what
	the server accepts. 

	First, user can authenticate using password for the requesting account, and 
	it will be secured through the already encrypted channel. 

	The alternative is the use of SSH key pairs: assimetric public/private keys.
	
	The process for keys goes as follows: 

		a ) The client sends an ID for the key pair it would like to 
		authenticate. 

		b ) The server checks the *authorized_keys* file, for the account
		requesting authentication. 

		c ) if a public key is found associated to the ID, the server generates
		a random number and uses the public key to encrypt the message.

		d ) The server sends the message. 
		
		e ) If the client actually has the associated key, it will decrypt 
		the message and get the number. 

		f ) The client combines the number with the shared session key and 
		computes the MD5 sum for that. <- why the MD5 sum and not simply the number? ###

		g ) The client answer to the server with the computed hash. 

		h ) The server goes to the same process and then compares hashes.
		If they match, it is proven that the client is who it says it is.

	After this process is conclude the session is finally stablished and secure comms
	can be interexchanged.


	[https://www.digitalocean.com/community/tutorials/understanding-the-ssh-encryption-and-connection-process#how-does-ssh-work]

04. Que Son Las Llaves SSH? Como Funcionan? Para Que Sirven? Donde Se Almacenan 
	Las Llaves SSH de Un Usuario?

	SSH keys are a pair of public/private keys that ssh client applications use 
	to authenticate to servers. As described in answer 03. , the client sends
	its public key to the server, who sends back a verification message.  Since 
	only the holder of the private key associated with a public key can decrypt
	messages, the client decodes the message with its private key and sends a 
	verification answer and finally, gets authenticated. 
	
	This pair of keys is also stored on servers if a control rule is set.  

	A differentiation to be made is that * identity keys * are used to identify
	users whilst * hots keys * identify computers. 

					---------------------------

	They are used as a more secure alternative for passwords over encrypted channels.
	Besides, something closely related to ssh keys are passphrase, which increase
	the level of security, this time in the client side.


	*Passphrases* are secrets used to protect encryption keys. How so? well the 
	private key is encrypted using the passphrase, thus making the keyfile useless
	to an attacker without the passphrase. Additionally, and as a consequence 
	of the mentioned encryption, the passphrase is needed to use the private
	key.

					---------------------------
	
	The creation dialog of ssh-keygen allows to choose the destination directory 
	of identity keys keyfiles. Default : 
		~/.ssh/ 	
	and format is: 
		id_algorithm[.pub] -- where pub is for the public key --

	On the other hand, location of host keys goes in: 
		/etc/ssh
	and format is: 
		ssh_host_algorithm[.pub]


	[https://www.ssh.com/ssh/passphrase | https://www.ssh.com/ssh/identity-key 
		| man ssh ] 

05. Como Se Crean Las Llaves SSH de Un Usuario? Debe Crear Sus Llaves SSH.

	Using the command * ssh-keygen * makes the trick. Relevant flags are: 

		-t: type of key to create (among dsa, ecdsa, ed255219, rsa).
		 -- other available algorithms can be queried in man ssh_config 
		in the HostKeyAlgorithm keyword section. --
		-b: number of bits in the key to create.
		-f: name of the keyfile.

	EXAMPLE: 	
	ssh-keygen -t rsa -b 4096 

		-- a dialog starts requesting path confirmation and passphrase: --
		
	Enter file in which to save the key (/home/shinji/.ssh/id_rsa): 
	Enter passphrase (empty for no passphrase): 
	Enter same passphrase again: 

		-- finally, creation is confirmed -- 

	Your identification has been saved in id_rsa-new.
	Your public key has been saved in id_rsa-new.pub.


	[ man ssh-keygen | https://help.github.com/es/github/authenticating-to-github/checking-for-existing-ssh-keys ]

06. Indique Una Posible Situacion En La Que Sea Muy Util Tener Las Llaves SSH.

	Using shared sistems, where the secrecy of personal files is not necessarily
	guaranteed. As stated in 04. , keys are not appart from passphrases which 
	are used to encrypt them, thus preventing anyone with enough permissions 
	to read our communications. 

	Connecting on unstrusted networks, such as public wifi or simply places 
	whose security is unknown. 

	GET CREATIVE!!!!! ###


	[ my brain ]

07. Si Usted Fuera Operador del LDC, Utilizaria Llaves SSH En La Pecera Para Los 
	Servidores? Explique Su Respuesta.

08. Explique Por Que Shamir Es Una Maquina Importante En el LDC?
	Es Un Riesgo Que Esta Maquina este Configurada de Esta Manera?

09. Que Es ssh-agent? Para Que Sirve el Comando ssh-add?

	ssh-agent keeps track of PRIVATE KEYS (on the local host ) used for key-based
	authentication primarily so a user doesn't has to give a password or passphrase 
	repeatedly (REMINDER: Private keys are created using passphrases).  It is an
	implementation of # Single sign-on #. It works like a keyring since identity 
	keys can be added to it useng ssh-add, or by means of a configuration file. 

	It usually starts in the beggining of a X11 session or a logging session
	and other windows or programs are clients to the ssh-client program.  By 
	using ** environment variables ** (such as SSH_AGENT_SOCK ) the agent is
	found and automatically used for authentication.  <- why does it need 
	to be found ? ### 

	-- Note: In order to connect to a server using the agent, the server must allow
	public key authentication, and must have the local file ~/.ssh/authorized_keys 
	with at least one public-key of the local host so that key-based logins from 
	our pc are enabled --
			
				---------------------------

	ssh-add adds PRIVATE KEYS identities to the authentication agent. If no file
	is specified, it search by default in: 
		~/.ssh/id_rsa
		~/.ssh/id_ecdsa
		~/.ssh/id_dsa
		~/.ssh/id_ed25519
	Alternative identity files can be given on the command line. 

	The authentication agent must be running and the variable SSH_AGENT_SOCKET
	must contain its socket for ssh-add to work. 

	Furthermore, in order to access some remote host ( of course, with 
	some sshd listening on some known port), the account to log into must 
	have added the public key of the remote host to the folder: 
		~/.ssh/authorized_keys
	
	EXAMPLE: 
		-- local side --
		scp -v ~/.ssh/id_rsa-mine.pub name@remote_hostname:~/.ssh
		-- server side -- 
		cat id_rsa-mine >> authorized_keys

	this way, key authentication, rather than password, is carried out. 


	-- Note: using verbose output one may notice that identity public files are checked
	for prescence (p.e. id-rsa.pub) , I asume this is for comparison on an existing 
	'authorized_hosts' file on the remote host, so key-based authentication is used.
	No surprise password authentication also shows to be the following authentication
	method : 
		
	"
		debug1: Authentications that can continue: publickey,password
		debug1: Next authentication method: publickey
		debug1: Offering public key: /home/shinji/.ssh/id_rsa RSA SHA256:fxIRt27f8Eao4N27FQ28nhzCI8HefEnOJgDIkbj/eec agent
		debug1: Authentications that can continue: publickey,password
		debug1: Offering public key: shinji@tato-00 RSA SHA256:CEMGIQwVwXEC1uT1DmsXDmIO/vD+pVHv6IvAK26wTCI agent
		debug1: Authentications that can continue: publickey,password
		debug1: Trying private key: /home/shinji/.ssh/id_dsa
		debug1: Trying private key: /home/shinji/.ssh/id_ecdsa
		debug1: Trying private key: /home/shinji/.ssh/id_ed25519
		debug1: Trying private key: /home/shinji/.ssh/id_xmss
		debug1: Next authentication method: password 
				"

	Thus probably enforced authentication method is key-based login. --
	

	In order to choose a particular identity file choose : -i ident_name.pub 

	EXAMPLE: 
		eval `ssh-agent -S`	 -- turn on ssh-agent --
		ssh-add ~/.ssh/id_rsa-mine.pub
		
		-- Trying login -- 
		
		ssh -i ~/.ssh/id_rsa-mine name@remote_hostname 

		-- This will ask for passphrase, but only once. After that, 	
		successive logins to that host are mediated by ssh-agent --
		
				---------------------------

	AGENT FORWARDING: 	

	An additional feature to ssh-agent is * agent forwarding *. Suppose there's a 	
	need to use ssh FROM a remote server ( Not necessarily with other's people access ).
	Then, in order to use single sign-on, we'd have to repeat configuration process ()
	on the remote host. Besides, if server is actually accesible with other (untrusted)
	user with high permission, using ssh-agent might be dangerous since our private
	keys can be retrieved from the agent ( ### dunno how ### ).

	Therefore, ssh allows to use the agent as if it were local on the server, thus 
	implementing a sort  of transitive single sign-on.

	-- Note: In order to use agent forwarding: 
		ForwardAgent must be set to yes on client <- man ssh_config
		AllowAgentForwarding must be set to yes on serve <-sshd_config
		--
		
	EXAMPLE: 
		ssh -A login_name@remote_hostaname

		### Include verfication ?? ###


	[ man ssh-agent | man ssh-add | https://www.ssh.com/ssh/agent 
		| https://dev.to/levivm/how-to-use-ssh-and-ssh-agent-forwarding-more-secure-ssh-2c32 ]
10. Como Hago Para Ver el Proceso de Autenticacion de Manera Detallada?

	ssh -vvv ### 

11. Que Es rsh, rcp y ftp? Cuales Son Las Versiones Seguras de Estos Comandos.

12. Como Hago Para Conectarme A Una Maquina Y Ejecutar Un Comando Y Que Luego
	 de Esto Se Cierre La Conexion.

13. Que Es Un Tunel SSH? Cree Un Tunel SSH Desde Afuera de La Universidad 
	Hacia Una de Las Maquinas del LDC Por el Puerto 20000.

14. Si Tengo Un Servidor Dentro de Un NAT, Como Hago Para Conectarme Al Mismo?

15. Donde Se Encuentran Los Logs del SSH? Que Es DenyHost, Cual Es Su Relacion Con SSH?

16. Como Exporto Las X Mediante SSH?

17. Que Es el Archivo known_hosts? Para Que Sirve? Que Pasa Si Se Borra?

18. Que Es rsync? Como Es La Sintaxis?

19. Si Necesita Copiar Una Gran Cantidad de Archivos, Que Utilizaria Entre 
	scp y rsync? Por Que?

20. Que Es ClusterSSH?

21. Indique Para Que Sirve el Archivo ~/.ssh/config. De Un Ejemplo de Su Uso.

22. Que Es SSHFS? Podria Usarse En el LDC?

23. Que Es autossh? Como Mantienes Una Sesion Abierta Para Siempre?

24. Indique Que Significa Cada Uno de Los Siguientes Avisos Y Como Resolver 
	el Problema.

	a) The authenticity of host 'arrakis (159.90.10.114)' can't be established.
	RSA key fingerprint is 6a:37:74:c3:a7:d2:51:1f:93:cb:5a:e6:b0:3e:7f:76.
	Are you sure you want to continue connecting (yes/no)? 

	b)
	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
	Someone could be eavesdropping on you right now (man-in-the-middle
	attack)!
	It is also possible that the RSA host key has just been changed.
	The fingerprint for the RSA key sent by the remote host is
	69:0c:bb:24:74:89:1a:fc:55:cf:4e:f2:d1:b2:b5:cc.
	Please contact your system administrator.
	Add correct host key in /home/edward/.ssh/known_hosts to get rid of this
	message.
	Offending key in /etc/ssh/ssh_known_hosts:4
	RSA host key for titan has changed and you have requested strict
	checking.
	Host key verification failed.

	c)
	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	@       WARNING: POSSIBLE DNS SPOOFING DETECTED!          @
	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	The RSA host key for dhcp has changed,
	and the key for the corresponding IP address 159.90.10.9
	is unchanged. This could either mean that
	DNS SPOOFING is happening or the IP address for the host
	and its host key have changed at the same time.
	
	Offending key for IP in /home/jose/.ssh/known_hosts:26

	d) 
	Warning: the RSA host key for 'taraza' differs from the key for the IP address '159.90.10.218'
	Offending key for IP in /etc/ssh/ssh_known_hosts:222
	Matching host key in /home/jose/.ssh/known_hosts:45
	Are you sure you want to continue connecting (yes/no)? 

	25. Problema: La Profesora Marlene Goncalves Tiene En Su Casa Una Red. En 
	Esa Red Tiene Una Computadora (Host Inalcanzable). Desde La Computadora Donde 
	Estoy No Puedo Acceder A La Computadora Que Ella Tiene En Su Casa, Pero Desde 
	La Computadora Que Esta En Su Cubiculo Si Puedo (Host Alcanzable). 
	Indique Como Puedo Conectarme A La Computadora Que Se Encuentra En Su Casa 
	Desde Mi Computadora Con Una Sola Linea de Comando Y Sin Usar el Caracter ; 
	En Su Super Linea. Alcanzar Un Host Inalcanzable Mediante Un Host Alcanzable.


Notes: 
	@ sshd is the daemon process spawned by openssh-server to listen for incoming 
	connections. One may think that daemons, for server software are the ones
	always listening. 

	@ check: man environ <- it's amazing

Glossary: 
	@ forward: reenviar
	@ display: monitor | exhibicion, despliegue, demostracion. 
